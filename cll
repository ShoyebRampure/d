#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the circular linked list
struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);

    if (head == NULL) {
        newNode->next = newNode; // Point to itself in a circular list
        return newNode;
    }

    newNode->next = head->next;
    head->next = newNode;
    return head;
}

// Function to insert a node at the end of the circular linked list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);

    if (head == NULL) {
        newNode->next = newNode; // Point to itself in a circular list
        return newNode;
    }

    newNode->next = head->next;
    head->next = newNode;
    return newNode;
}

// Function to delete a node from the circular linked list
struct Node* deleteNode(struct Node* head, int data) {
    if (head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return NULL;
    }

    struct Node* current = head->next;
    struct Node* previous = head;

    // Search for the node to be deleted
    while (current != head && current->data != data) {
        previous = current;
        current = current->next;
    }

    // Node not found
    if (current == head && current->data != data) {
        printf("Node not found.\n");
        return head;
    }

    // Node found, delete it
    if (current == head) {
        // If the node to be deleted is the head, update the head
        head = head->next;
    }

    previous->next = current->next;
    free(current);
    printf("Node with data %d deleted.\n", data);
    return head;
}

// Function to display the circular linked list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* current = head->next;

    printf("Circular Linked List: ");
    do {
        printf("%d ", current->data);
        current = current->next;
    } while (current != head);

    printf("\n");
}

// Function to free memory allocated for the circular linked list
void freeList(struct Node* head) {
    if (head == NULL) {
        return;
    }

    struct Node* current = head->next;
    struct Node* nextNode;

    do {
        nextNode = current->next;
        free(current);
        current = nextNode;
    } while (current != head);

    free(head);
}

int main() {
    struct Node* head = NULL;

    // Example usage
    head = insertAtEnd(head, 1);
    head = insertAtEnd(head, 2);
    head = insertAtEnd(head, 3);

    displayList(head);

    head = insertAtBeginning(head, 0);
    displayList(head);

    head = deleteNode(head, 2);
    displayList(head);

    // Free memory
    freeList(head);

    return 0;
}
